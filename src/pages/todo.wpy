<style lang="less" scoped>
.old-todo-page {
    .top-container {
        height: 508rpx;
        background: linear-gradient(to bottom, #6445C2 0, #7773E4 40%, #5D88EE 100%);
        padding: 30rpx 34rpx;
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        color: #ffffff;
        .time-container {
            margin: 10rpx 0rpx 30rpx 0rpx;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            .time {
                font-size: 80rpx;
            }
            .info {
                font-size: 40rpx;
            }
        }
        .main-container {
            margin: 30rpx 0rpx;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            .course {
                display: flex;
                justify-content: center;
                text-align: center;
                font-size: 60rpx;
                line-height: 66rpx;
                font-weight: 500;
            }
            .info {
                text-align: center;
                margin-top: 10rpx;
                font-size: 30rpx;
                font-weight: 300;
            }
        }
    }
}
.todo-view {
    swiper {
        height: 700rpx;
    }
    .slide-item {
        @redis: 500rpx;
        @innerRedis: 466rpx;
        @bgColor: linear-gradient(to right, #6445C2 0,#7773E4 50% , #5D88EE 100%);
        background: #ffffff;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        .circle-bar { 
            // font-size:200px; 
            width: @redis; 
            height: @redis; 
            position: relative;
            background: @bgColor;
            border-radius: 50%;
            position: absolute; 
            top:0; right:0; bottom:0; left:0; margin:auto;
            .circle-bar-left {
                border-radius: 50%;
                width: @redis; height: @redis; background-color: #eee;
                clip:rect(0,@redis/2,auto,0);
                position: absolute; 
                top:0; right:0; bottom:0; left:0; margin:auto;
            }
            .circle-bar-right {
                border-radius: 50%;
                width: @redis; height: @redis; background-color: #eee;
                clip:rect(0,auto,auto,@redis/2);
                position: absolute; 
                top:0; right:0; bottom:0; left:0; margin:auto;
            }
            .circle-bar-dark {
                border-radius: 50%;
                width: @redis; height: @redis; background: @bgColor;
                clip:rect(0,auto,auto,@redis/2);
                position: absolute; 
                top:0; right:0; bottom:0; left:0; margin:auto;
            }
        }


        .mask { 
            border-radius: 50%;
            width: @innerRedis; 
            height: @innerRedis;  
            background-color: #fff;
            text-align: center;
            line-height: 0.2em; 
            color:rgba(0,0,0,0.5); 
            position: absolute; top:0; right:0; bottom:0; left:0; margin:auto;
            display: flex;
            justify-content: center;
            align-items: center;

            color: #34348a;
            font-size: 100rpx;
        }
    }
}
.add-btn {
    @radius: 120rpx;
    width: @radius;
    height: @radius;
    border-radius: 50%;
    background: #F5A623;
    box-shadow: 1px 8px 23px 0 rgba(245,166,35,0.35);
    position: fixed;
    right: 50rpx;
    bottom: 60rpx;
    display: flex;
    justify-content: center;
    align-items: center;
    view {
        font-size: 100rpx;
        color: #fff;
        margin-top: -20rpx;
        font-weight: 300;
    }
}
</style>

<template>
    <view class="todo-view">
        <swiper
            indicator-dots="true"
            autoplay="false"
            duration="500"
        >
        <block wx:for="{{ todoList }}" wx:for-index="index" wx:for-item="item" wx:key="index">
            <swiper-item>
                <view class="slide-item">
                    <view class="circle-bar">
                        <view class="circle-bar-left" style="transform:rotate({{item.percent > 50 ? (item.percent-50)*3.6 : 0}}deg);"></view>
                        <view class="circle-bar-right" style="transform:rotate({{item.percent <= 50 ? item.percent*3.6 : 0}}deg);"></view>
                        <view wx:if="{{ item.percent > 50 }}" class="circle-bar-dark" ></view>
                        <!-- 遮罩层，显示百分比 -->
                        <view class="mask">
                            <view>
                                00:30
                            </view>
                            <!-- <text class="percent">60%</text> -->
                        </view>
                    </view>
                    <!-- <view class="progress-bar">
                        <view class="inner-circle"></view>
                    </view> -->
                </view> 
            </swiper-item>
        </block>
        </swiper>
    </view>

    <view class="add-btn">
        <view>
            +
        </view>
    </view>
    <!-- <view class="old-todo-page">
        <view wx:if="{{ course }}" class="top-container">
            <view class="time-container">
                <view class="time">
                    {{hour}}:{{minute}}:{{second}}
                </view>
                <view class="info">
                    即将上课
                </view>
            </view>
            <view class="main-container">
                <view class="course">
                    {{ course.name }}
                </view>
                <view class="info">
                    {{ course.teacher }} | {{ course.place }}
                </view>
            </view>
        </view>
    </view> -->
</template>

<script>
import wepy from 'wepy'
import CourseMixin from '../mixins/course';
export default class MyPage extends wepy.page {
    config = {
        'usingComponents': {
            'i-button': 'iview/button/index',
            "i-input": "iview/input/index",
            "i-panel": "iview/panel/index",
            "i-avatar": "iview/avatar/index",
            "i-cell-group": "iview/cell-group/index",
            "i-cell": "iview/cell/index",
            "i-icon": "iview/icon/index"
        },
        "navigationBarTitleText": "日程",
        // "navigationBarBackgroundColor": "#6445C2",
        // "navigationBarTextStyle": 'white',
    }
    data = {
        courseList: [],
        hour: '',
        minute: '',
        second: '',
        course: [],
        todoList: [
            {
                percent: 50,
                name: 'hhh'
            },
            {
                percent: 40,
                name: 'hhh1'
            },
            {
                percent: 80,
                name: 'hhh3'
            },
        ],
        imgUrls: [
            'http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg',
            'http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg',
            'http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg'
        ],
    }
    mixins = [ CourseMixin ]
    prase_num(number) {
        if (number < 10) {
            return `0${number}`
        }
        return `${number}`
    }
    calcTimeDiff(cur, tar) {
        if (tar.hour < cur.hour) {
            return {
                status: -1
            }
        }
        if (tar.hour === cur.hour) {
            if(tar.minute < cur.minute) {
                return {
                    status: -1
                }
            }
            if(tar.minute === cur.minute) {
                if(tar.second < cur.second) {
                    return {
                        status: -1
                    }
                }
                // OK
                return {
                    status: 0,
                    hour: 0,
                    minute: 0,
                    second: tar.second - cur.second,
                }
            }
            // OK
            return {
                status: 0,
                hour: 0,
                minute: tar.minute - cur.minute - 1,
                second: tar.second + (60 - cur.second - 1),
            }
        }
        return {
            status: 0,
            hour: tar.hour - cur.hour - 1,
            minute: tar.minute + (60 - cur.minute - 1),
            second: tar.second + (60 - cur.second - 1),
        }
        console.log(cur, tar)
    }
    async onLoad() {
        try {
            let courseList = wepy.$storage.get('course')
            if (!courseList) {
                this.loaded = false
                this.$apply()
                courseList = await this.initCourse()
                this.loaded = true
                this.$apply()
                wepy.$storage.setAsync('course', courseList)
            }
            
            // First get today's course, then next day's course
            setInterval(() => {
                const date = new Date();
                let day = date.getDay()
                if (day == 0)
                    day = 7
                const hour = date.getHours()
                const minute = date.getMinutes()
                const second = date.getSeconds()
                const todayList = courseList[day-1]
                for(let i = 0; i < todayList.length; i++) {
                    const cur = todayList[i]
                    
                    const res = this.calcTimeDiff({
                        hour,
                        minute,
                        second
                    }, {
                        hour: cur.startTime.hour || 0,
                        minute: cur.startTime.min || 0,
                        second: cur.startTime.second || 0,
                    })
                    if( res.status === -1) {
                        continue
                    }
                    this.hour = this.prase_num(res.hour)
                    this.minute = this.prase_num(res.minute)
                    this.second = this.prase_num(res.second)
                    this.course = cur
                    this.$apply()
                    break
                    // if(cur.startTime.hour)
                }

            }, 1000)
        } catch (error) {
            console.log(error)
        }
    }
}
</script>