<template>
    <view class="termview-page">
        <view class="overview">
            <view class="box">
                <view class="label">
                    总学分
                </view>
                <view class="item">
                    {{gpaData.unitsum}}
                </view>
            </view>
            <view class="vhr"></view>
            <view class="box">
                <view class="label">
                    学期绩点
                </view>
                <view class="item">
                    {{gpaData.termgpa}}
                </view>
            </view>
            <view class="vhr"></view>
            <view class="box">
                <view class="label">
                    累积绩点
                </view>
                <view class="item">
                    {{gpaData.cumulativegpa}}                    
                </view>
            </view>
            <view class="vhr"></view>
            <view class="box">
                <view class="label">
                    学期排名
                </view>
                <view class="item">
                    N/A
                </view>
            </view>
        </view>
        <view class="main">
            <view wx:for-items="{{ gpaData.gpainfo }}" wx:for-index="index" wx:for-item="item" wx:key="index">
                <view class="grade-bar">
                    <view class="title">
                        {{item.description}}　{{item.grade}}
                    </view>
                    <view class="bar">
                        <i-progress percent="{{item.percent}}" status="success" units="{{item.units}}"></i-progress>
                    </view>
                </view>
            </view>
        </view>
        <view class="chart-container">
            <ff-canvas id="line-dom" canvas-id="line" opts="{{ opts }}"></ff-canvas>
        </view>
    </view>
</template>

<script>
import wepy from 'wepy'

import F2 from './f2-canvas/lib/f2';

let chart = null;

async function initChart(canvas, width, height) {
    const parse_term = (term) => {
        const res = term.split(' ');
        return `${res[1]} ${res[2]}`
    }

    const source = await wepy.$storage.getAsync('gpaList');

    const data = [...source.map(item => {
        return {
            term: parse_term(item.term.name),
            type: 'single',
            gpa: item.termgpa
        }
    }).reverse(), ...source.map(item => {
        return {
            term: parse_term(item.term.name),
            type: 'sum',
            gpa: item.cumulativegpa
        }
    }).reverse()];

    const defs = {
        term: {
            type: 'cat'
        },
        gpa: {
            min: 2,
            max: 4
        }
    }

    chart = new F2.Chart({
        el: canvas,
        width,
        height,
        pixelRatio: 3
    });

    chart.source(data, defs);

    chart.legend({
        itemWidth: 50,
        offsetY: -10,
        valueStyle: {
            fill: '#808080'
        }
    });

    chart.axis('gpa', false);
    chart.axis('term', {
        line: {
            stroke: '#1b1929'
        },
        grid: {
            lineDash: null,
            stroke: '#1b1929',
            lineWidth: 1
        },
        label: function label(text, index) {
            if (true) {
            return {
                fill: '#35274b',
                fontWeight: 'bold'
            };
            }
            return null;
        }
    });

    chart.line().position('term*gpa').color('type', ['#503e7a', '#7affec']).size('type', function(val) {
        if (val === 'single') {
            return 2;
        }
        return 1;
    }).animate({
        appear: {
            duration: 2000
        }
    });
    chart.point().position('term*gpa').color('type', ['#503e7a', '#7affec']).size(5).animate({
        appear: {
            duration: 2000
        }
    });

    chart.render();
    return chart;
}

export default class GradePage extends wepy.page {
    config = {
        "navigationBarTitleText": "",
        // "disableScroll": true,
        "usingComponents": {
            "i-spin": "iview/spin/index",
            "i-toast": "iview/toast/index",
            "i-progress": "iview/progress/index",
            "ff-canvas": "f2-canvas/f2-canvas"
        },
        "navigationBarBackgroundColor": "#56CCF2",
        "navigationBarTextStyle": 'white',
        "backgroundTextStyle": "dark"
    }
    data = {
        gpaData: null,
        opts: {
            onInit: initChart
        }
    }
    // async init() {
    //     const res = await wepy.$http({
    //         url: `/gpa?term=${this.term}`,
    //         method: 'get'
    //     });
    //     this.grade = res.data;


    //     this.$apply();
    //     console.log(this.gpainfo)
    // }
    async onLoad(options) {
        this.gpaData = (await wepy.$storage.getAsync('gpaList'))[options.index];
        wx.setNavigationBarTitle({
            title: this.gpaData.term.name
        })
    }
}
</script>

<style lang="less">
page {
    background: linear-gradient(to bottom, #56CCF2, #2F80ED); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
}
.termview-page {
    padding-bottom: 50rpx;
    .chart-container {
        // background-image: linear-gradient(-135deg, #874BFF 0%, #6854EE 43%, #6052F2 63%, #534FFA 100%);
        height: 300rpx;
        margin: 40rpx 40rpx 0rpx 40rpx;
        border-radius: 20rpx;
        background: #140f21;
        ff-canvas {
            width: 100%;
            height: 100%;
        }
    }
    min-height: 100vh;
    background: linear-gradient(to bottom, #56CCF2, #2F80ED); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    .vhr {
        height: 90rpx;
        width: 1px;
        margin-top: 0rpx;
        background: #eeeeee;
    }
    color: #ffffff;
    .main {
        padding: 0rpx 40rpx;
        .grade-bar {
            padding: 18rpx 0rpx;
            .title {
                font-size: 31rpx;
                margin-bottom: -6rpx;
            }
            .bar {
                width: 95%;
            }
        }
    }
    .overview {
        height: 180rpx;
        padding-top: 20rpx;
        display: flex;
        justify-content: space-around;
        align-items: center;
        padding: 0rpx 30rpx;
        .box {
            display: flex;
            flex-direction: column;
            align-items: center;
            .label {
                font-weight: 300;
                font-size: 26rpx;
            }
            .item {
                padding-top: 10rpx;
                font-weight: 700;
                font-size: 40rpx;
            }
        }
    }
}
</style>
