<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

import storage from './utils/storage'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/my',
      'pages/today',
      'pages/bind',
      'pages/schedule',
      'pages/schedule1',
      'pages/bus'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '求是潮Mobile',
      navigationBarTextStyle: 'black',
    },
    tabBar: {
      // selectedColor: "#f06292",
      color: "#707070",
      list: [
        {
          pagePath: "pages/index",
          text: "首页",
          iconPath: "icon/home.png",
          selectedIconPath: "icon/home@select.png"
        },
        {
          pagePath: "pages/today",
          text: "今日",
          iconPath: "icon/news.png",
          selectedIconPath: "icon/news@select.png"
        },
        {
          pagePath: "pages/my",
          text: "我的",
          iconPath: "icon/user.png",
          selectedIconPath: "icon/user@select.png"
        },
      ]
    }
  }

  globalData = {
    userInfo: null
  }

  constructor () {
    super()
    this.use('requestfix');
    this.use('promisify');

    this.intercept('request', {
            // 发出请求时的回调函数
            config (p) {
                // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
                p.header = {
                  'Authorization': `Bearer ${p.general? storage.get('general_token'): storage.get('access_token')}`
                }
                console.log('config request: ', p);
                // 必须返回OBJECT参数对象，否则无法发送请求到服务端
                return p;
            },

            success (p) {
                console.log('request success: ', p);
                return p;
            },
            fail (p) {
                console.log('request fail: ', p);
                return p;
            },

            complete (p) {
                console.log('request complete: ', p);
            }
        });
  }

  onLaunch() {
    this.checkToken();
  }

  async login() {
    try {
      const { code } = await wepy.login();
      const { data } = await wepy.request({
        url: 'http://localhost:3000/wechat/code',
        method: 'POST',
        data: {
          code
        }});
      storage.set('general_token', data.general_token);
      if(!storage.get('access_token')) {
        wepy.reLaunch({
          url: "./pages/bind"
        });
      }
    } catch (error) {
      console.log(error)
    }
  }

  async checkToken() {
    const access_token = storage.get('access_token');
    if(!access_token) {
      await this.login();
    } else {
      try {
        await wepy.checkSession();
      } catch (err) {
        console.log(err)
        this.login();
      }
    }
  }


  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
